name: deploy-ztp-relocatable
on:
  workflow_dispatch:
    inputs:
      KUBECONFIG:
        description: 'Absolute path to KUBECONFIG file?'
        required: true
      SPOKES_FILE:
        description: 'Absolute path to the Spokes YAML file?'
        required: true
      RUNNER:
        description: 'GitHub Action Runner Tag'
        required: true


env:
  KUBECONFIG: ${{github.event.inputs.KUBECONFIG}}
  SPOKES_FILE: ${{github.event.inputs.SPOKES_FILE}}
  DEPLOY_ACM_DIR: deploy-acm
  DEPLOY_REGISTRY_DIR: deploy-disconnected-registry
  DEPLOY_HTTPD_SERVER_DIR: deploy-httpd-server
  DEPLOY_HUB_CONFIGS_DIR: deploy-hub-configs
  DEPLOY_SPOKES_DIR: deploy-spoke
  DEPLOY_WORKER_DIR: deploy-worker
  DEPLOY_OCS_DIR: deploy-ocs
  DEPLOY_POLICY_DIR: deploy-policies
  FINISH_DEP_DIR: finish-deployment
  SHARED_DIR: shared-utils


jobs:
  pre-flight:
    continue-on-error: true
    runs-on: ${{github.event.inputs.RUNNER}}   #tag with your runner tag
    steps:
      - uses: actions/checkout@v2 # create a checkout (pull repository) in the runner working_dir (usually _work)
      - run: git pull origin ${GITHUB_REF##*/}

      - name: Verification
        run: |
          export WORKDIR=${GITHUB_WORKSPACE}
          cd ${{env.SHARED_DIR}}
          ./verify_preflight.sh
      #TODO create the verify step if hub exist just to start from spoke step
      #- name: verify-if-hub-exists
      #  run: |
      #    cd ${{env.SHARED_DIR}}
      #    ./verify_if_hub_exists.sh

  deploy-httpd-server:
    needs: pre-flight          # run in parallel with the other jobs
    runs-on: ${{github.event.inputs.RUNNER}}
    #TODO if env after verify-if-hub-exists is true then run the following steps
    steps:
      - name: Deploy Internal HTTPD Server
        run: |
          export WORKDIR=${GITHUB_WORKSPACE}
          cd ${{env.DEPLOY_HTTPD_SERVER_DIR}}
          ./deploy.sh


  deploy-disconnected-registry-hub:
    needs: pre-flight       # run in parallel with the other jobs
    runs-on: ${{github.event.inputs.RUNNER}}
    steps:
      - name: Deploy Internal Disconnected Registry
        run: |
          export WORKDIR=${GITHUB_WORKSPACE}
          cd ${{env.DEPLOY_REGISTRY_DIR}}
          ./deploy.sh 'hub'
          ./ocp-sync.sh 'hub'
          ./olm-sync.sh 'hub'
          ./update-global-pullsecret.sh 'hub'

  deploy-acm:
    needs: deploy-disconnected-registry-hub       # run in parallel with the other jobs
    runs-on: ${{github.event.inputs.RUNNER}}
    steps:
      - name: Deploy RHACM with AI
        run: |
          export WORKDIR=${GITHUB_WORKSPACE}
          cd ${{env.DEPLOY_ACM_DIR}}
          ./deploy.sh


  deploy-icsp-hub:
    needs: [deploy-acm, deploy-disconnected-registry-hub, deploy-httpd-server]       # run in parallel with the other jobs
    runs-on: ${{github.event.inputs.RUNNER}}
    steps:
      - name: Deploy ICSP in the Hub
        run: |
          export WORKDIR=${GITHUB_WORKSPACE}
          cd ${{env.DEPLOY_SPOKES_DIR}}
          ./configure_disconnected.sh 'hub'


  deploy-hub-config:
    needs: [deploy-acm, deploy-disconnected-registry-hub, deploy-httpd-server]       # run in parallel with the other jobs
    runs-on: ${{github.event.inputs.RUNNER}}
    steps:
      - name: Deploy hub configuration
        run: |
          export WORKDIR=${GITHUB_WORKSPACE}
          cd ${{env.DEPLOY_HUB_CONFIGS_DIR}}
          ./deploy.sh


  #deploy-policies:
  #  needs: deploy-acm
  #  runs-on: ${{github.event.inputs.RUNNER}}
  #  steps:
  #    - name: Deploy policies
  #      run: |
  #        export WORKDIR=${GITHUB_WORKSPACE}
  #        cd ${{env.DEPLOY_POLICY_DIR}}
  #        ./deploy.sh


  deploy-spokes:
    needs: [deploy-hub-config, deploy-icsp-hub]
    runs-on: ${{github.event.inputs.RUNNER}}
    steps:
      - name: Deploy Spokes
        run: |
          export WORKDIR=${GITHUB_WORKSPACE}
          cd ${{env.DEPLOY_SPOKES_DIR}}
          ./render_spokes.sh; sleep 3
          ./deploy.sh



  verify-installation:
    needs: deploy-spokes
    runs-on: ${{github.event.inputs.RUNNER}}
    steps:
      - name: Verify spoke installation
        run: |
          export WORKDIR=${GITHUB_WORKSPACE}
          cd ${{env.DEPLOY_SPOKES_DIR}}
          ./wait_for_spoke.sh
   #       systemctl restart firewalld NetworkManager libvirtd; firewall-cmd --complete-reload; kcli ssh root@test-ci-installer "sudo systemctl restart sushy"


  deploy-icsp-spokes-pre:
    needs: verify-installation
    runs-on: ${{github.event.inputs.RUNNER}}
    steps:
      - name: Deploy ICSP in all the spokes in the Pre flow
        run: |
          export WORKDIR=${GITHUB_WORKSPACE}
          cd ${{env.DEPLOY_SPOKES_DIR}}
          ./configure_disconnected.sh 'spoke' 'pre'


  #deploy-ocs:
  #  needs: deploy-icsp-spokes-pre
  #  runs-on: ${{github.event.inputs.RUNNER}}
  #  steps:
  #    - name: Deploy OCS
  #      run: |
  #        export WORKDIR=${GITHUB_WORKSPACE}
  #        cd ${{env.DEPLOY_OCS_DIR}}
  #        ./deploy.sh
  #
  #
  #deploy-disconnected-registry-spokes:
  #  needs: deploy-ocs        # run in parallel with the other jobs
  #  runs-on: ${{github.event.inputs.RUNNER}}
  #  steps:
  #    - name: Deploy Internal Disconnected Registry in each spoke
  #      run: |
  #        export WORKDIR=${GITHUB_WORKSPACE}
  #        cd ${{env.DEPLOY_REGISTRY_DIR}}
  #        ./deploy.sh 'spoke'
  #        ./ocp-sync.sh 'spoke'
  #        ./olm-sync.sh 'spoke'
  #        ./update-global-pullsecret.sh 'spoke'
  #
  #
  #deploy-icsp-spokes-post:
  #  needs: deploy-disconnected-registry-spokes
  #  runs-on: ${{github.event.inputs.RUNNER}}
  #  steps:
  #    - name: Deploy ICSP in all the spokes in the Post flow
  #      run: |
  #        export WORKDIR=${GITHUB_WORKSPACE}
  #        cd ${{env.DEPLOY_SPOKES_DIR}}
  #        ./configure_disconnected.sh 'spoke' 'post'
  #
  #finish-deployment:
  #  needs: deploy-icsp-spokes-post
  #  runs-on: ${{github.event.inputs.RUNNER}}
  #  steps:
  #    - name: Deploy NNCP and detach spoke clusters
  #      run: |
  #        export WORKDIR=${GITHUB_WORKSPACE}
  #        cd ${{env.FINISH_DEP_DIR}}
  #        ./deploy.sh
  #
  #deploy-workers:
  #  needs: finish-deployment
  #  runs-on: ${{github.event.inputs.RUNNER}}
  #  steps:
  #    - name: Deploy workers
  #      run: |
  #        export WORKDIR=${GITHUB_WORKSPACE}
  #        cd ${{env.DEPLOY_WORKER_DIR}}
  #        ./render_worker.sh
  #